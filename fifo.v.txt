module fifo(input clk, input rst, input [7:0] datain, output reg [7:0] dataout, output reg [7:0] ctr, input w_en, input r_en, output full, output empty ) ;

reg [3:0] rptr;
reg [3:0] wptr;
reg [7:0] memory[63:0] ; 
always @(ctr)
 begin
  empty = (ctr == 0);
  full =  (ctr == 64);
 end

always @(posedge clk or posedge rst)
begin
 if(rst)
   ctr <= 0;
 else begin
 if((!empty && r_en) && (!full && w_en))
    ctr <= ctr;
 else if(!empty && r_en)
    ctr <= ctr-1;
 else if(!full && w_en))
    ctr <= ctr+1;
 else
    ctr <= ctr;
 end
end

always @(posedge clk or posedge rst)
begin
 if(rst)
   dataout <= 0;
 else beign
   if(!empty && r_en)
    dataout <= memory[rptr];
   else 
    dataout <= dataout;
 end
end

always @(posedge clk)
 begin
   if(!full && w_en)
    memory[wptr] <= datain;
   else 
    memory[wptr] <= memory[wptr];
 end

always @(posedge clk or posedge rst)
begin
 if(rst)
   wptr <= 0;
   rptr <= 0;

 else beign 
 if(!empty && r_en)
    rptr <= rptr + 1;
 else 
    rptr <= rptr;
 if(!full && w_en))
    wptr <= wptr + 1;
 else
    wptr <= wptr;
 end
end

endmodule





  
  

  
   


